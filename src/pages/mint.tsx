import Head from "next/head";
import { BsImage } from "react-icons/bs";
import { useState, ChangeEvent, useEffect, useContext } from "react";
import { API_ENDPOINT, NFT_STORAGE_KEY } from "../utils/constants";
import { NFTStorage, File } from "nft.storage";
import axios from "axios";
import { useWallet } from "@manahippo/aptos-wallet-adapter";
import {
  createCollectionPayload,
  createTokenPayload,
  tokenClient,
} from "../utils/aptos";
import { ModalContext } from "../components/Navbar/ModalContext";
import { replaceIpfsLink } from "../utils/utils";
import { useRouter } from "next/router";
import Image from "next/image";

export default function Asset() {
  const router = useRouter();
  const { account, signAndSubmitTransaction } = useWallet();
  const { modalState, setModalState } = useContext(ModalContext);
  const client = new NFTStorage({ token: NFT_STORAGE_KEY });
  const [formInput, updateFormInput] = useState<{
    collection: string;
    name: string;
    description: string;
    file: File | null;
  }>({
    collection: "",
    name: "",
    description: "",
    file: null,
  });
  const [error, setError] = useState<string>("");
  const [base64image, setBase64image] = useState("");
  const [isLoad, setIsLoad] = useState<boolean>(false);

  const createCollection = async (address: string, collection: string) => {
    try {
      await tokenClient.getCollectionData(address, collection);
    } catch (error) {
      console.log(error);
      await signAndSubmitTransaction(
        createCollectionPayload(
          collection,
          "_1200_dollars_per_hour",
          "https://github.com/amovane/aptos-NFT-marketplace"
        ),
        { gas_unit_price: 100 }
      );
    }
  };

  const mintNFT = async () => {
    if (!account) {
      setModalState({ ...modalState, walletModal: true });
      return;
    }
    const { collection, name, description, file } = formInput;
    if (!account || !collection || !name || !description || !file) return;
    setIsLoad(true);
    try {
      const address = account!.address!.toString();
      const metadata = await client.store({
        name: name,
        description: description,
        image: new File([file!], file!.name, { type: file!.type }),
      });
      const image = replaceIpfsLink(metadata.data.image.href);
      await createCollection(address, collection);
      await signAndSubmitTransaction(
        createTokenPayload(collection, name, description, image, address),
        { gas_unit_price: 100 }
      );
      await axios.put(`${API_ENDPOINT}/market/update`, {
        type: "REQUEST_MINT",
        tokenId: {
          property_version: 0,
          token_data_id: {
            collection: collection,
            creator: address,
            name: name,
          },
        },
      });
      setIsLoad(false);
      router.push(`/profile/${account!.address?.toString()}/collected`);
    } catch (error) {
      setError("error");
      setIsLoad(false);
    }
  };

  async function onChange(e: ChangeEvent<HTMLInputElement>) {
    const file = e.target.files![0];
    updateFormInput({ ...formInput, file: file });
    const reader = new FileReader();
    reader.onload = function (event) {
      setBase64image(event.target!.result!.toString());
    };
    reader.readAsDataURL(file);
  }
  useEffect(() => {
    const fetchData = async () => {};
    fetchData();
  }, []);

  return (
    <>
      <Head>
        <title>NFT Mint</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <main>
        <div className="px-80 pt-16 pb-20">
          <div className="text-4xl font-bold">Mint a new piece of art</div>
          <div className="flex flex-col py-4 gap-2 relative">
            <div>COLLECTION NAME*</div>
            <input
              type="text"
              name="name"
              value={formInput.collection}
              disabled={isLoad}
              onChange={(e) =>
                updateFormInput({ ...formInput, collection: e.target.value })
              }
              className="outline-none border-b border-gray-200 dark:bg-[#121212]"
              placeholder="Collection name"
            />
            {formInput.collection.length > 30 ? (
              <div className="text-red-700 text-xs absolute top-[75px]">
                <p>The name must be less than 30 letters.</p>
              </div>
            ) : null}
          </div>
          <div className="flex flex-col py-4 gap-2 relative">
            <div>TOKEN NAME*</div>
            <input
              type="text"
              name="name"
              value={formInput.name}
              disabled={isLoad}
              onChange={(e) =>
                updateFormInput({ ...formInput, name: e.target.value })
              }
              className="outline-none border-b border-gray-200 dark:bg-[#121212]"
              placeholder="Token name"
            />
            {formInput.name.length > 30 ? (
              <div className="text-red-700 text-xs absolute top-[75px]">
                <p>The name must be less than 30 letters.</p>
              </div>
            ) : null}
          </div>
          <div className="flex flex-col py-4 gap-2 relative">
            <div>DESCRIPTION*</div>
            <textarea
              name="name"
              value={formInput.description}
              disabled={isLoad}
              onChange={(e) =>
                updateFormInput({ ...formInput, description: e.target.value })
              }
              className="outline-none border-b order-gray-200 dark:bg-[#121212]"
              placeholder="Add a detailed description about this piece of art."
            />
            {formInput.description.length > 300 ? (
              <div className="text-red-700 text-xs absolute top-[100px]">
                <p>The name must be less than 30 letters.</p>
              </div>
            ) : null}
          </div>
          <div className="flex flex-col py-4 gap-2">
            <div>UPLOAD ART</div>
            <div className="flex">
              <label htmlFor="asset" className="">
                {base64image ? (
                  <Image
                    className="rounded mt-4"
                    width={350}
                    height={350}
                    src={base64image}
                    alt="preview"
                  />
                ) : (
                  <div className="border border-black text-3xl flex items-center justify-center p-8">
                    <BsImage />
                  </div>
                )}
              </label>
              <input
                type="file"
                name="asset"
                id="asset"
                disabled={isLoad}
                className="invisible"
                onChange={onChange}
              />
            </div>
          </div>
          <div className="relative">
            <button
              className="w-36 py-2 bg-[#63C3A7] text-gray-200 my-4  text-xl font-semibold hover:bg-[#40a789] rounded"
              onClick={mintNFT}
            >
              {isLoad ? (
                <div className="flex items-center justify-center">
                  <span className="loader mr-2"></span>
                  MINTING...
                </div>
              ) : (
                <div>MINT</div>
              )}
            </button>
            {error.length > 2 ? (
              <div className="text-red-700 text-xs absolute top-[60px]">
                <p>{error}</p>
              </div>
            ) : null}
          </div>
        </div>
      </main>
    </>
  );
}
